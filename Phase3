design

module phase3(input clk, input rst, input [2:0] dir_in, output reg status_done, output reg fail);
    reg [2:0] expected_seq [4:0];
    reg [2:0] index;
    reg [2:0] count;

    initial begin
        expected_seq[0] = 3'b000; // UP
        expected_seq[1] = 3'b011; // RIGHT
        expected_seq[2] = 3'b001; // DOWN
        expected_seq[3] = 3'b010; // LEFT
        expected_seq[4] = 3'b000; // UP
    end

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            index <= 0;
            status_done <= 0;
            fail <= 0;
        end else begin
            if (dir_in == expected_seq[index]) begin
                index <= index + 1;
                if (index == 4)
                    status_done <= 1;
            end else begin
                fail <= 1;
                index <= 0;
            end
        end
    end
endmodule

test bench

module tb_phase3;
    reg clk = 0, rst = 1;
    reg [2:0] dir_in;
    wire status_done, fail;

    phase3 uut(.clk(clk), .rst(rst), .dir_in(dir_in), .status_done(status_done), .fail(fail));

    always #5 clk = ~clk;

    initial begin
        $display("Starting Phase 3 Test...");
        #10 rst = 0;
        dir_in = 3'b000; #10; // UP
        dir_in = 3'b011; #10; // RIGHT
        dir_in = 3'b001; #10; // DOWN
        dir_in = 3'b010; #10; // LEFT
        dir_in = 3'b000; #10; // UP
        $display("Done: %b, Fail: %b", status_done, fail);
        $finish;
    end
endmodule
